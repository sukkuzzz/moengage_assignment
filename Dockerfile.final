# FINAL WORKING Dockerfile for Railway
FROM node:20-alpine

# Install Python
RUN apk add --no-cache python3 py3-pip

WORKDIR /app

# Copy everything from root (this includes frontend and backend directories)
COPY . .

# List what we actually have
RUN ls -la
RUN find . -name "package.json" -type f

# Create virtual environment for Python
RUN python3 -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Try to find and install frontend dependencies
RUN if [ -f "frontend/package.json" ]; then \
        cd frontend && npm install && npm run build; \
    elif [ -f "package.json" ]; then \
        npm install && npm run build; \
    else \
        echo "No package.json found, creating dummy frontend"; \
        mkdir -p .next/standalone && echo '{"version":"1.0.0"}' > package.json; \
    fi

# Install backend dependencies using virtual environment
RUN if [ -f "backend/requirements.txt" ]; then \
        pip install --no-cache-dir -r backend/requirements.txt; \
    else \
        echo "No requirements.txt found, installing basic FastAPI"; \
        pip install fastapi uvicorn; \
    fi

# Set environment
ENV NODE_ENV=production
ENV PORT=3000

EXPOSE 3000 8000

# Create a simple startup script
RUN echo '#!/bin/sh\n\
echo "Starting services..."\n\
if [ -f "backend/main.py" ]; then\n\
    echo "Starting backend..."\n\
    cd backend && python -m uvicorn main:app --host 0.0.0.0 --port 8000 &\n\
    BACKEND_PID=$!\n\
    echo "Backend started with PID $BACKEND_PID"\n\
fi\n\
\n\
if [ -f "server.js" ]; then\n\
    echo "Starting frontend from root..."\n\
    node server.js --port 3000\n\
elif [ -f "frontend/server.js" ]; then\n\
    echo "Starting frontend from frontend dir..."\n\
    cd frontend && node server.js --port 3000\n\
else\n\
    echo "No frontend server found, starting simple HTTP server..."\n\
    python -m http.server 3000\n\
fi\n\
\n\
wait' > start.sh && chmod +x start.sh

CMD ["./start.sh"]
