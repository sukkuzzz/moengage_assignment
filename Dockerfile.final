# FINAL WORKING Dockerfile for Railway
FROM node:20-alpine

# Install Python
RUN apk add --no-cache python3 py3-pip

WORKDIR /app

# Copy everything from root (this includes frontend and backend directories)
COPY . .
# Ensure SQLite DB is available inside backend directory (skip copying onto itself)
RUN if [ -f "sql_runner.db" ]; then \
      mkdir -p backend && cp -f sql_runner.db backend/sql_runner.db; \
    else \
      echo "sql_runner.db not found in build context"; \
    fi

# List what we actually have
RUN ls -la
RUN find . -name "package.json" -type f

# Create virtual environment for Python
RUN python3 -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Try to find and install frontend dependencies
RUN if [ -f "frontend/package.json" ]; then \
        cd frontend && npm install && npm run build; \
    elif [ -f "package.json" ]; then \
        npm install && npm run build; \
    else \
        echo "No package.json found, creating dummy frontend"; \
        mkdir -p .next/standalone && echo '{"version":"1.0.0"}' > package.json; \
    fi

# Install backend dependencies using virtual environment
RUN if [ -f "backend/requirements.txt" ]; then \
        pip install --no-cache-dir -r backend/requirements.txt; \
    else \
        echo "No requirements.txt found, installing basic FastAPI"; \
        pip install fastapi uvicorn; \
    fi

# Set environment
ENV NODE_ENV=production
ENV PORT=8000

EXPOSE 8000

# Create a robust startup script that always serves a FastAPI app
RUN echo '#!/bin/sh\n\
set -e\n\
APP_PORT=${PORT:-8000}\n\
echo "Starting on port ${APP_PORT}"\n\
if [ -f "backend/main.py" ]; then\n\
  echo "Detected backend/main.py; starting backend..."\n\
  exec python -m uvicorn backend.main:app --host 0.0.0.0 --port ${APP_PORT}\n\
elif [ -f "main.py" ]; then\n\
  echo "Detected main.py in root; starting backend..."\n\
  exec python -m uvicorn main:app --host 0.0.0.0 --port ${APP_PORT}\n\
else\n\
  echo "No backend code found; starting minimal FastAPI fallback..."\n\
  cat > /app/_fallback_app.py <<\'PYEOF'\n\
from fastapi import FastAPI\n\
app = FastAPI(title="Fallback API", version="1.0.0")\n\
@app.get("/")\n\
def root():\n\
    return {"status": "ok"}\n\
@app.get("/api/tables")\n\
def tables():\n\
    return {"tables": []}\n\
PYEOF\n\
  exec python -m uvicorn _fallback_app:app --host 0.0.0.0 --port ${APP_PORT}\n\
fi\n' > start.sh && chmod +x start.sh

CMD ["./start.sh"]
